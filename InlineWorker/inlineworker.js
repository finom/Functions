( function() {	// PseudoWorker function is fallback function for old browsers	//Original PseudoWorker constructor is here: http://code.google.com/p/ie-web-worker/	/* --  var Worker = function ( scriptFile ) */	/* ++ */ var PseudoWorker = function PseudoWorker( scriptFile, isSource )	{		var self = this ;		var __timer = null ;		var __text = null ;		var __fileContent = null ;		var onmessage ;			self.onerror = null ;		self.onmessage = null ;		// child has run itself and called for it's parent to be notified		var postMessage = function( text )		{			if ( "function" == typeof self.onmessage )			{				return self.onmessage( { "data" : text } ) ;			}			return false ;		} ;		// Method that starts the threading		self.postMessage = function( text )		{			__text = text ;			__iterate() ;			return true ;		} ;		var __iterate = function()		{			// Execute on a timer so we dont block (well as good as we can get in a single thread)			__timer = setTimeout(__onIterate,1);			return true ;		} ;		var __onIterate = function()		{			try			{				if ( "function" == typeof onmessage )				{					onmessage({ "data" : __text });				}				return true ;			}			catch( ex )			{				if ( "function" == typeof self.onerror )				{					return self.onerror( ex ) ;				}			}			return false ;		} ;		self.terminate = function ()		{			clearTimeout( __timer ) ;			return true ;		} ;		/* HTTP Request*/		var getHTTPObject = function () 		{			var xmlhttp;			try 			{				xmlhttp = new XMLHttpRequest();			}			catch (e) 			{				try 				{					xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");				}				catch (e) 				{					xmlhttp = false;				}			}			return xmlhttp;		}				/* ++ */ if( ! isSource ) {			var http = getHTTPObject()			http.open("GET", scriptFile, false)			http.send(null);			if (http.readyState == 4) 			{				var strResponse = http.responseText;				switch (http.status) 				{					case 404: // Page-not-found error						alert('Error: Not Found. The requested function could not be found.');						break;					case 500: // Display results in a full window for server-side errors						alert(strResponse);						break;					default:						__fileContent = strResponse ;						// IE functions will become delagates of the instance of Worker						eval( __fileContent ) ;						/*						at this point we now have:						a delagate "onmessage(event)"						*/						break;				}			}		/* ++ */ } else {		/* ++ */	eval(scriptFile.toString());		/* ++ */ }		self.importScripts = function(src)		{			// hack time, this will import the script but not wait for it to load...			var script = document.createElement("SCRIPT") ;			script.src = src ;			script.setAttribute( "type", "text/javascript" ) ;			document.getElementsByTagName("HEAD")[0].appendChild(script)			return true ;		} ;		return true ;	} ;		//Returns Worker instance. If current browseê doesn't support BlobBuilder or URL then code will be "single threaded"	window.InlineWorker = function InlineWorker( source, onmessage ) {		var source = 'onmessage = ' + source.toString(),			worker;		window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;		window.URL = window.URL || window.webkitURL;				if( window.BlobBuilder && window.URL ) {			var bb = new BlobBuilder();			bb.append( source );			worker = new Worker( window.URL.createObjectURL( bb.getBlob() ) );		} else {			worker = new PseudoWorker( source, true );		}				if( onmessage ) {			worker.onmessage = onmessage;		}				return worker;	}		//If you want to use original (executed from file) Worker in IE	if( !window.Worker ) {		window.Worker = PseudoWorker;	}})();