( function() {	var callAll = function( array, args ) {		for( var i = 0; i < array.length; i++ ) {			array[ i ].call( this, args );		}	};		Function.prototype.addCallListener = function( type, handler ) {		var callEvents = this.callEvents || {},			handlers = callEvents.handlers = callEvents.handlers || {				before: [],				after: [],				success: [],				error: []			},			resultFunction;						callEvents.successNumber = callEvents.successNumber || 0;			callEvents.errorNumber = callEvents.errorNumber || 0;			callEvents.target = callEvents.target || this;								if( handler ) {			handlers[ type ].push( handler );		} else {			for( var i in type ) {				handlers[ i ].push( type[ i ] );			}		}				resultFunction = function() {			var args = [].slice.call(arguments);			var result, error;			var props = {				args: args,				context: this,				name: callEvents.target.name,				target: callEvents.target			}			props.successNumber = callEvents.successNumber;			props.errorNumber = callEvents.errorNumber;						callAll( handlers.before, props );							try {				result = callEvents.target.apply(this, arguments);				props.successNumber = ++callEvents.successNumber;				props.result = result;				props.status = 'success';				callAll( handlers.success, props );			} catch (e) {				props.errorNumber = ++callEvents.errorNumber;				props.error = e;				props.status = 'error';				callAll( handlers.error, props );			}						callAll( handlers.after, props );			return result;		};				resultFunction.callEvents = callEvents;				return resultFunction;	};	})();